import argparse
import pickle

import numpy as np


parser = argparse.ArgumentParser(
    description="Script creates a pickle file with data for drawing a plot."
                " Resulting object in pickle file is a dictionary. Dictionary"
                " keys are labels of lines in legend, dictionary values are"
                " lists of three elements. The first element of such a list is"
                " a list a list of X values, the second element is a list of Y "
                "values, and the third is a list of deviations of Y values used"
                " adding error bars. X values, Y values, and errors are provided"
                " in separate arguments --step, --mean, and --stddev. By default lists of "
                " file names in these arguments are sorted before zipped. X values are"
                " provided in text files (validation results, e.g. loss_valid.txt)."
                " Y and Y error values are provided in pickle files, generated by "
                "average_pickle_values.py script. Figures are drawn by "
                "plot_from_pickle.py script.",
)
parser.add_argument(
    "--labels",
    help="Names of lines on plot. Number of labels has to match number of "
         "mean, stddev, and step files.",
    nargs='+',
)
parser.add_argument(
    "--step",
    help="A list of files with validation results or alternatively list"
         " of any file in which each line starts with steps.",
    nargs='+',
    type=argparse.FileType('r'),
)
parser.add_argument(
    "--mean",
    help="A list of pickle files with mean values",
    nargs='+',
    type=argparse.FileType('rb'),
)
parser.add_argument(
    "--stddev",
    help="A list of pickle files with stddev values.",
    nargs='+',
    type=argparse.FileType('rb'),
)
parser.add_argument(
    "--output",
    help="Path to output file where plot data will be saved",
    default="plot_data.pickle"
)
parser.add_argument(
    "--no_sort",
    help="Do not sort --step, --mean, --stddev before zipping.",
    action="store_true",
)
parser.add_argument(
    '--preprocess',
    help="Function applied to values before storing into plot_data. Possible "
         "options: (1)sqrt. Default is None",
    default=None,
)
parser.add_argument(
    '--start_idx',
    help="Index of the first point in plot_data. Points with indices less than "
         "start_idx are not added. Default is zero.",
    type=int,
    default=0,
)
args = parser.parse_args()

if args.preprocess == 'sqrt':
    f = np.sqrt
    std_f = lambda t: t[0] / (2 * np.sqrt(t[1] + 1e-15))
else:
    f = lambda x: x
    std_f = f

if not args.no_sort:
    args.mean = sorted(args.mean, key=lambda x: x.name)
    args.stddev = sorted(args.stddev, key=lambda x: x.name)
    args.labels = sorted(args.labels)


def extract_steps_from_valid_results(file):
    return [int(line.split()[0]) for line in file]


class PickleContentIsNotDataSeries(Exception):
    def __init__(self, message):
        super().__init__(message)


def load_list_from_pickle_file(file):
    zeroth = pickle.load(file)
    try:
        first = pickle.load(file)
    except EOFError:
        try:
            iter(zeroth)
        except TypeError:
            raise PickleContentIsNotDataSeries(
                "pickle file {} contains 1 not iterable object. File has to contain\n"
                "\teither list or 1 dim array of numbers\n"
                "\tor several numbers as separate objects."
            )
        return list(zeroth)
    res = [zeroth, first]
    while True:
        try:
            res.append(pickle.load(file))
        except EOFError:
            break
    return res


means = [load_list_from_pickle_file(f) for f in args.mean]
if args.stddev is not None:
    stddevs = [load_list_from_pickle_file(f) for f in args.stddev]
else:
    stddevs = [[0.] * len(m) for m in means]

steps = [extract_steps_from_valid_results(f) for f in args.step]

plot_data = dict()
for lbl, stp, mn, std in zip(args.labels, steps, means, stddevs):
    mn = list(map(f, mn))
    std = list(map(std_f, zip(std, mn)))
    plot_data[lbl] = [stp[args.start_idx:], mn[args.start_idx:], std[args.start_idx:]]

with open(args.output, 'wb') as f:
    pickle.dump(plot_data, f)
